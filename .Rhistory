install.packages("RStata")
### Parallelized version of After_Hwang_v3_MonteCarlo.R using multivariate regressors
### check whether increasing sample size gives converging estimates to population bounds
#install.packages("splines")
#install.packages("quantreg")
#install.packages("pracma")
#install.packages("cubature")
#install.packages("foreach")
#install.packages("doParallel")
#install.packages("cde")
#install.packages("np")
#install.packages("McSpatial")
#install.packages("MASS")
#install.packages("emdbook")
library(splines)   # Libraries
library(quantreg)
library(pracma)
library(cubature)
library(foreach)                                                                # Parallel Implementation of Boostrap Calculations
library(doParallel)
library(cde)
library(np)
library(McSpatial)
library(MASS)
library(emdbook)
samsize <- c(6000)
beta    <- c(0,1,1,1)
gamma   <- c(0,1,1)
mu      <- c(0,0,0,0)
sigma   <- eye(4)
# mu and sigma for vector (w1,w2,x,y)
A <- rbind( c(1,0,0,0), c(0,1,0,0), c(gamma[2],gamma[3],1,0), c(beta[3]+beta[2]*gamma[2],beta[4]+beta[2]*gamma[3], beta[2],1))
B <- c(0,0,gamma[1],beta[1])
mu2    <- A%*%mu + B
sigma2 <- A%*%sigma%*%t(A)
mu2
sigma2
A
gamma
beta
install.packages(c("broom", "ggthemes", "mapproj", "maps", "readstata13", "sf", "socviz", "tidycensus", "tidyverse", "tigris", "usmap"))
install.packages(c("broom", "ggthemes", "mapproj", "maps", "readstata13", "sf", "socviz", "tidycensus", "tidyverse", "tigris", "usmap"))
install.packages(c("broom", "ggthemes", "mapproj", "maps", "readstata13", "sf", "socviz", "tidycensus", "tidyverse", "tigris", "usmap"))
install.packages(c("broom", "ggthemes", "mapproj", "maps", "readstata13", "sf", "socviz", "tidycensus", "tidyverse", "tigris", "usmap"))
devtools::install_github("hrbrmstr/albersusa")
library(albersusa)
devtools::install_github("ropensci/USAboundariesData")
rm(list=ls()) # clean memory
#setwd("/Users/denghuan/Downloads/covid19")
library(tidyverse)
library(socviz) # to draw maps wihout discarding Alaska
library(maps)
library(mapproj)
library(tigris)
library(tidycensus)
library(sf)
library(broom)
library(viridis)
library(USAboundariesData)
library(usmap)
#devtools::install_github("hrbrmstr/albersusa")
#devtools::install_github("ropensci/USAboundariesData")
library(ggthemes)
library(albersusa)
library(copula)
cop <- gumbleCopula(200)
cop <- gumbelCopula(200)
contourplot2(cop,dCopula)
contourplot2(cop,pCopula)
cop <- gumbelCopula(1)
cop <- gumbelCopula(2)
contourplot2(cop,dCopula)
cop <- gumbelCopula(100)
contourplot2(cop,dCopula)
cop <- claytonCopula(2)
contourplot2(cop,dCopula)
cop <- frankCopula(2)
contourplot2(cop,dCopula)
cop <- gumbelCopula(100)
contourplot2(cop,dCopula)
cop <- gumbelCopula(500)
contourplot2(cop,dCopula)
cop <- gumbelCopula(200)
contourplot2(cop,dCopula)
load("~/Dropbox/Document/AntiAsian Racism/Data/Pilot Survey/data/DistParam.RData")
# load libraries
# install these packages if you haven't
library(gmailr)
library(googlesheets4)
### set a directory for a Gmail Client ID json file
FILEDIR="/Users/yujung/Dropbox/Document/GoogleAPI/"
### set a filename for the json file
FILENAME="gmailr.json"
# configure Gmail API
gm_auth_configure(path=paste0(FILEDIR,FILENAME))
### read seminar schedule info (CHANGE THE SPREADSHEET LINK BELOW)
seminar_schedule_link <- "https://docs.google.com/spreadsheets/d/1TVZpmKuRcB2IbOgfgtGQvebvVEMMS8LoNHuEvh30EU8/edit#gid=0"
seminar_schedule <- read_sheet(seminar_schedule_link)
# compute the days until the next seminar
daysleft <- as.Date(seminar_schedule$Date) - Sys.Date()
ind <- which(daysleft>=0)[1]
### retrieve the next speaker information
### seminar speaker name
speaker_name =seminar_schedule$Speaker[ind]
### speaker email
speaker_email =seminar_schedule$Email[ind]
### speaker institution
speaker_institution =seminar_schedule$Institution[ind]
### paper title
paper_title =seminar_schedule$Paper[ind]
### seminar date and time
seminar_date=seminar_schedule$Date[ind]
seminar_time=seminar_schedule$Time[ind]
### Set organizer / audience information
### Organizer first name
organizer_name="Yujung"
### Organizer email address
organizer_email ="yujungghwang@gmail.com"
### Audience email
audience_email ="yujungghwang@gmail.com"
### Zoom link for the seminar
zoom_link="https://zoom.us/my/yhwang"
### sign up information
signup_link ="https://docs.google.com/spreadsheets/d/11HCLZPHPx0j0ILhy3w8u5QAiPk1SD8paJdbgVzPJSm0/edit#gid=0"
grad_signup_time ="Monday 10AM"
# load libraries
# install these packages if you haven't
library(gmailr)
library(googlesheets4)
### set a directory for a Gmail Client ID json file
FILEDIR="/Users/yujung/Dropbox/Document/GoogleAPI/"
### set a filename for the json file
FILENAME="gmailr.json"
# configure Gmail API
gm_auth_configure(path=paste0(FILEDIR,FILENAME))
### read seminar schedule info (CHANGE THE SPREADSHEET LINK BELOW)
seminar_schedule_link <- "https://docs.google.com/spreadsheets/d/1TVZpmKuRcB2IbOgfgtGQvebvVEMMS8LoNHuEvh30EU8/edit#gid=0"
seminar_schedule <- read_sheet(seminar_schedule_link)
# compute the days until the next seminar
daysleft <- as.Date(seminar_schedule$Date) - Sys.Date()
ind <- which(daysleft>=0)[1]
### retrieve the next speaker information
### seminar speaker name
speaker_name =seminar_schedule$Speaker[ind]
### speaker email
speaker_email =seminar_schedule$Email[ind]
### speaker institution
speaker_institution =seminar_schedule$Institution[ind]
### paper title
paper_title =seminar_schedule$Paper[ind]
### seminar date and time
seminar_date=seminar_schedule$Date[ind]
seminar_time=seminar_schedule$Time[ind]
### Set organizer / audience information
### Organizer first name
organizer_name="Yujung"
### Organizer email address
organizer_email ="yujungghwang@gmail.com"
### Audience email
audience_email ="yujungghwang@gmail.com"
### Zoom link for the seminar
zoom_link="https://zoom.us/my/yhwang"
### sign up information
signup_link ="https://docs.google.com/spreadsheets/d/11HCLZPHPx0j0ILhy3w8u5QAiPk1SD8paJdbgVzPJSm0/edit#gid=0"
grad_signup_time ="Monday 10AM"
# email to a seminar speaker to ask a paper title / paper copy
# first check if there is any seminar scheduled within the next 10 days & if paper title is empty
source("setGmailConfig.R")
daysleft[ind]
seminar_schedule
is.null(seminar_schedule$PaperTitle[ind])
is.na(seminar_schedule$PaperTitle[ind])
help(range_clear)
# update the sign up sheet to blank page
range_clear(signup_link,range="B3:B12")
range_clear(signup_link,range="A1")
range_write(signup_link,data=paste0(speaker_name," sign up"),range="A1")
speaker_name
range_write(signup_link,data=as.data.frame(paste0(speaker_name," sign up")),range="A1")
range_write(signup_link,data=as.data.frame(x=paste0(speaker_name," sign up")),range="A1")
as.data.frame(paste0(speaker_name," sign up"))
range_write(signup_link,data=as.data.frame(paste0(speaker_name," sign up"))[1,1],range="A1")
as.data.frame(paste0(speaker_name," sign up"))
signuphead=as.data.frame(paste0(speaker_name," sign up"))
colnames(signuphead)=NULL
signuphead
range_write(signup_link,data=signuphead,range="A1")
seminar_date
signuphead=as.data.frame(a1=paste0(speaker_name," sign up"),a2=paste0("Date : ",seminar_date))
colnames(signuphead)=NULL
range_write(signup_link,data=signuphead,range="A1")
signuphead=as.data.frame(x=paste0(speaker_name," sign up"),y=paste0("Date : ",seminar_date))
signuphead
signuphead=as.data.frame(cbind(paste0(speaker_name," sign up"),paste0("Date : ",seminar_date)))
signuphead
colnames(signuphead)=NULL
range_write(signup_link,data=signuphead,range="A1")
Sys.time()
format(Sys.time())
Sys.getenv("R_HOME")
library(bndovb)
data(maindat_nome)
data(auxdat_nome)
bndovb(maindat=maindat_nome,auxdat=auxdat_nome,depvar="y",ovar="x1",comvar=c("x2","x3"),method=1)
data(maindat_mecont)
data(auxdat_mecont)
pvar<-c("z1","z2","z3")
cvar<-c("x","w1")
bndovbme(maindat=maindat_mecont,auxdat=auxdat_mecont,depvar="y",pvar=pvar,ptype=1,comvar=cvar)
data(maindat_medisc)
data(auxdat_medisc)
bndovbme(maindat=maindat_medisc,auxdat=auxdat_medisc,depvar="y",pvar=pvar,ptype=2,comvar=cvar)
library(bndovb)
data(maindat_mecont)
data(auxdat_mecont)
pvar<-c("z1","z2","z3")
cvar<-c("x","w1")
bndovbme(maindat=maindat_mecont,auxdat=auxdat_mecont,depvar="y",pvar=pvar,ptype=1,comvar=cvar)
bndovbme(maindat=maindat_mecont,auxdat=auxdat_mecont,depvar="y",pvar=pvar,ptype=1,comvar=cvar,signres="pos")
install.packages("factormodel")
install.packages("factormodel")
library(bndovb)
data(maindat_nome)
data(auxdat_nome)
bndovb(maindat=maindat_nome,auxdat=auxdat_nome,depvar="y",ovar="x1",comvar=c("x2","x3"),method=1,mainweights=rep(1,100000),auxweights=rep(1,50000))
traceback()
getwd()
setwd("/Users/yujung/Dropbox/Document/GitHub/bndovb/")
library(devtools)
devtools::document()
devtools::check()
devtools::build()
devtools::install(dependencies=FALSE)
